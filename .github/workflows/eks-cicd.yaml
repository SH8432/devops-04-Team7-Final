name: EKS CICD

on:
  push:
    branches: [ "CICD" ]
    paths:
      - "ReqSys/**"

permissions:
  contents: read

env:
  AWS_REGION: ${{ secrets.REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: reqsys

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        ref: 'CICD'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_1 }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_1 }}
        aws-region: ${{ env.AWS_REGION }}
            
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1


    - name: Get SQS ARN
      id: get-sqs-arn
      run: |
        queue_name=<SQS_QUEUE_NAME>
        queue_url=$(aws sqs get-queue-url --queue-name "IntegrateEventQueue" --query 'QueueUrl' --output text)
        queue_arn=$(aws sqs get-queue-attributes --queue-url "$queue_url" --attribute-names QueueArn --query 'Attributes.QueueArn' --output text)
        echo "SQS ARN: $queue_arn"
        echo "::set-output name=sqs_arn::$queue_arn"  

    - name: Confirm Output
      run: |
        echo "Output SQS ARN: ${{ steps.get-sqs-arn.outputs.sqs_arn }}"
          
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
      run: |
        docker build \
        --tag ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }} \
        --build-arg HOSTNAME=${{ secrets.REQSYS_HOSTNAME }} \
        --build-arg USERNAME=${{ secrets.REQSYS_USERNAME }} \
        --build-arg PASSWORD=${{ secrets.REQSYS_PASSWORD }} \
        --build-arg DATABASE=${{ secrets.REQSYS_DATABASE }} \
        --build-arg AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_1 }} \
        --build-arg AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_1 }} \
        --build-arg QUEUE_URL=${{ secrets.QUEUE_URL }} \
        ./ReqSys
        docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}

    - name: Get kubeconfig
      run:
        aws eks update-kubeconfig --name eks-reqsys --region ap-northeast-2 --kubeconfig kubeconfig.yaml

    - uses: tale/kubectl-action@v1
      with:
        base64-kube-config: kubeconfig.yaml

    - name: Deploy new image
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
        sudo mv kustomize /usr/local/bin
        export ECR_REPOSITORY=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
        export IMAGE_TAG=${{ github.sha }}
        export KUBECONFIG=kubeconfig.yaml
        envsubst < ReqSys/EKS/kustomization.tmpl.yaml > ReqSys/EKS/kustomization.yaml
        cat ReqSys/EKS/kustomization.yaml
        kubectl config current-context 
        kubectl apply -k ReqSys/EKS

